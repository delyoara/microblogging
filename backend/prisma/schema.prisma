// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  email          String    @unique
  passwordHash   String
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  
  posts          Post[]
  comments       Comment[]
  likes          Like[]

  followers       Follow[] @relation("FollowedBy")
  following       Follow[] @relation("Follows")
}

model Post {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  content   String
  createdAt DateTime  @default(now())

  theme     Theme     @relation(fields: [themeId], references: [id])
  themeId   Int

  comments  Comment[]
  likes     Like[]
}


model Theme {
  id     Int    @id @default(autoincrement())
  name   String @unique
  posts  Post[]
}


model Comment {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  content   String
  createdAt DateTime  @default(now())
}

model Like {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime  @default(now())
  
  @@unique([userId, postId]) // Un utilisateur ne peut liker un post qu'une fois
}



model Follow {
  follower     User @relation("Follows", fields: [follower_id], references: [id])
  follower_id  Int

  followed     User @relation("FollowedBy", fields: [followed_id], references: [id])
  followed_id  Int

  created_at   DateTime @default(now())

  @@id([follower_id, followed_id])
}


enum Role {
  USER
  ADMIN
}


